{
    "search_products_1": {
        "code": "def search_products_1(text):\n    \"\"\"\n    Search products by locating the input text box, typing the text, and clicking the search button.\n\n    Args:\n        text (str): The products to search.\n\n    Returns:\n        None\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.click_btn import click_btn\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        search_input = driver.find_element(By.CLASS_NAME, \"SuggestionSearch-input\")\n        search_input.clear()  # Clear any existing text\n        search_input.send_keys(text)  # Type the search text\n\n        # Locate the search button by its class name and click it\n        click_btn(driver, btn_class_name=\"SuggestionSearch-button\")\n        time.sleep(2)\n        print(f\"[{(__name__)}]: successfully searched: {text}\")\n\n    except Exception as e:\n        print(f\"[{(__name__)}]: Error occurred during the search: {e}\")",
        "description": "Search products by locating the input text box, typing the text, and clicking the search button"
    },
    "scrap_products_1": {
        "code": "def scrap_products_1(search_text):\n    \"\"\"\n    Scrap the available products data after searching for a specific product.\n\n    Args:\n        search_text (str): The text to search for products.\n\n    Returns:\n        The first item of the scraped products list.\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.extract_product_data import extract_product_details\n        from selenium_utils.json_products_data import save_results_to_json\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n\n        # Search for products\n        search_input = driver.find_element(By.CLASS_NAME, \"SuggestionSearch-input\")\n        search_input.clear()  # Clear any existing text\n        search_input.send_keys(search_text)  # Type the search text\n\n        # Locate the search button by its class name and click it\n        from selenium_utils.click_btn import click_btn\n        click_btn(driver, btn_class_name=\"SuggestionSearch-button\")\n        time.sleep(2)\n        print(f\"[{(__name__)}]: successfully searched: {search_text}\")\n\n        # Find all product elements\n        product_items = driver.find_elements(By.CLASS_NAME, 'product-brief-wrapper')\n        results = []\n\n        for item in product_items:\n            product_details = extract_product_details(item)\n            if product_details:  # Only append if product details were successfully extracted\n                results.append(product_details)\n\n        print(f\"[{(__name__)}]: Scraped {len(results)} products\")\n        save_results_to_json(results)\n        print(f\"[{(__name__)}]: Saved the results to json ./product_data/product_data.json\")\n        if results:\n            return results[0]\n        else:\n            return None\n\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to scrap products: {e}\")\n        return None",
        "description": "Scrap the available products data after searching for a specific product"
    },
    "pick_one_product_1": {
        "code": "def pick_one_product_1(product_data):\n    \"\"\"\n    Pick any one of the product and return its product_code.\n\n    Args:\n        product_data (list): A list of dictionaries containing product information.\n\n    Returns:\n        str: The product_code of the picked product.\n    \"\"\"\n    try:\n        if product_data:\n            result = product_data[0]['product_code']\n        else:\n            result = None\n\n        print(f\"[{(__name__)}]: Pick the first product with product_code {result}\")\n        return result\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to pick the first products: {e}\")\n        return None",
        "description": "Pick any one of the product and return its product_code"
    },
    "add_item_to_cart_1": {
        "code": "def add_item_to_cart_1(product_code):\n    \"\"\"\n    Add the selected product to cart after pick_one_product.\n\n    Args:\n        product_code (str): The product code to be added to cart.\n\n    Returns:\n        str: A message indicating whether the product has been successfully added to cart.\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        product = driver.find_element(By.CSS_SELECTOR, f'div[data-id=\"{product_code}\"]')\n        add_to_cart_button = product.find_element(By.CLASS_NAME, 'sepaButton.add-to-cart-button')\n        add_to_cart_button.click()  # Click the button\n        print(f\"[{__name__}]Successfully clicked 'Add to Cart' for product code: {product_code}\")\n        return f\"Product {product_code} added to cart successfully.\"\n    except Exception as e:\n        print(f\"Error adding item to cart: {e}\")\n        return f\"Failed to add product {product_code} to cart.\"",
        "description": "Add the selected product to cart after pick_one_product"
    },
    "search_products_2": {
        "code": "def search_products_2(text):\n    \"\"\"\n    Search products by locating the input text box, typing the text, and clicking the search button.\n\n    Args:\n        text (str): The products to search.\n\n    Returns:\n        None\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.click_btn import click_btn\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        search_input = driver.find_element(By.CLASS_NAME, \"SuggestionSearch-input\")\n        search_input.clear()  # Clear any existing text\n        search_input.send_keys(text)  # Type the search text\n\n        # Locate the search button by its class name and click it\n        click_btn(driver, btn_class_name=\"SuggestionSearch-button\")\n        time.sleep(2)\n        print(f\"[{(__name__)}]: successfully searched: {text}\")\n\n    except Exception as e:\n        print(f\"[{(__name__)}]: Error occurred during the search: {e}\")",
        "description": "Search products by locating the input text box, typing the text, and clicking the search button"
    },
    "scrap_products_2": {
        "code": "def scrap_products_2():\n    \"\"\"\n    Scrap the available products data.\n\n    Args:\n    None\n\n    Returns:\n    The first item of the scraped products list.\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.extract_product_data import extract_product_details\n        from selenium_utils.json_products_data import save_results_to_json\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n\n        # Find all product elements\n        product_items = driver.find_elements(By.CLASS_NAME, 'product-brief-wrapper')\n        results = []\n\n        for item in product_items:\n            product_details = extract_product_details(item)\n            if product_details:  # Only append if product details were successfully extracted\n                results.append(product_details)\n\n        print(f\"[{(__name__)}]: Scraped {len(results)} products\")\n        save_results_to_json(results)\n        print(f\"[{(__name__)}]: Saved the results to json ./product_data/product_data.json\")\n        if results:\n            return results[0]\n        else:\n            return None\n\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to scrap products: {e}\")\n        return None",
        "description": "Scrap the available products data"
    },
    "pick_one_product_2": {
        "code": "def pick_one_product_2(product_data):\n    \"\"\"\n    Pick any one of the product and return its product_code.\n\n    Args:\n        product_data (list): A list of dictionaries containing product information.\n\n    Returns:\n        str: The product_code of the picked product.\n    \"\"\"\n    try:\n        if product_data:\n            result = product_data[0]['product_code']\n        else:\n            result = None\n\n        print(f\"[{(__name__)}]: Pick the first product with product_code {result}\")\n        return result\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to pick the first products: {e}\")\n        return None",
        "description": "Pick any one of the product and return its product_code"
    },
    "add_item_to_cart_2": {
        "code": "def add_item_to_cart_2(product_code):\n    \"\"\"\n    Add the selected product to cart after pick_one_product.\n\n    Args:\n        product_code (str): The product code to be added to cart.\n\n    Returns:\n        str: A message indicating whether the product has been successfully added to cart.\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        product = driver.find_element(By.CSS_SELECTOR, f'div[data-id=\"{product_code}\"]')\n        add_to_cart_button = product.find_element(By.CLASS_NAME, 'sepaButton.add-to-cart-button')\n        add_to_cart_button.click()  # Click the button\n        print(f\"[{__name__}]Successfully clicked 'Add to Cart' for product code: {product_code}\")\n        return f\"Product {product_code} added to cart successfully.\"\n    except Exception as e:\n        print(f\"Error adding item to cart: {e}\")\n        return f\"Failed to add product {product_code} to cart.\"",
        "description": "Add the selected product to cart after pick_one_product"
    },
    "search_products_3": {
        "code": "def search_products_3(text):\n    \"\"\"\n    Search products by locating the search bar, inputting the text, and clicking enter.\n\n    Args:\n        text (str): The products to search.\n\n    Returns:\n        None\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium.webdriver.common.keys import Keys\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        search_input = driver.find_element(By.CLASS_NAME, \"SuggestionSearch-input\")\n        search_input.clear()  # Clear any existing text\n        search_input.send_keys(text)  # Type the search text\n        search_input.send_keys(Keys.RETURN)  # Click enter\n        time.sleep(2)\n        print(f\"[{(__name__)}]: successfully searched: {text}\")\n\n    except Exception as e:\n        print(f\"[{(__name__)}]: Error occurred during the search: {e}\")",
        "description": "Search products by locating the search bar, inputting the text, and clicking enter"
    },
    "scrap_products_3": {
        "code": "def scrap_products_3():\n    \"\"\"\n    Scrap the available products data after searching for a specific product.\n\n    Args:\n    None\n\n    Returns:\n    The first item of the scraped products list.\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.extract_product_data import extract_product_details\n        from selenium_utils.json_products_data import save_results_to_json\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n\n        # Find all product elements\n        product_items = driver.find_elements(By.CLASS_NAME, 'product-brief-wrapper')\n        results = []\n\n        for item in product_items:\n            product_details = extract_product_details(item)\n            if product_details:  # Only append if product details were successfully extracted\n                results.append(product_details)\n\n        print(f\"[{(__name__)}]: Scraped {len(results)} products\")\n        save_results_to_json(results)\n        print(f\"[{(__name__)}]: Saved the results to json ./product_data/product_data.json\")\n        if results:\n            return results[0]\n        else:\n            return None\n\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to scrap products: {e}\")\n        return None",
        "description": "Scrap the available products data after searching for a specific product"
    },
    "pick_one_product_3": {
        "code": "def pick_one_product_3(product_data):\n    \"\"\"\n    Pick any one of the product and return its product_code.\n\n    Args:\n        product_data (list): A list of dictionaries containing product information.\n\n    Returns:\n        str: The product_code of the picked product.\n    \"\"\"\n    try:\n        if product_data:\n            result = product_data[0]['product_code']\n        else:\n            result = None\n\n        print(f\"[{(__name__)}]: Pick the first product with product_code {result}\")\n        return result\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to pick the first products: {e}\")\n        return None",
        "description": "Pick any one of the product and return its product_code"
    },
    "add_item_to_cart_3": {
        "code": "def add_item_to_cart_3(product_code):\n    \"\"\"\n    Add the selected product to cart after pick_one_product.\n\n    Args:\n        product_code (str): The product code to be added to cart.\n\n    Returns:\n        str: A message indicating whether the product has been successfully added to cart.\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        product = driver.find_element(By.CSS_SELECTOR, f'div[data-id=\"{product_code}\"]')\n        add_to_cart_button = product.find_element(By.CLASS_NAME, 'sepaButton.add-to-cart-button')\n        add_to_cart_button.click()  # Click the button\n        print(f\"[{__name__}]Successfully clicked 'Add to Cart' for product code: {product_code}\")\n        return f\"Product {product_code} added to cart successfully.\"\n    except Exception as e:\n        print(f\"Error adding item to cart: {e}\")\n        return f\"Failed to add product {product_code} to cart.\"",
        "description": "Add the selected product to cart after pick_one_product"
    },
    "search_products_4": {
        "code": "def search_products_4(text):\n    \"\"\"\n    Search products by locating the search bar, inputting the text, and clicking enter.\n\n    Args:\n        text (str): The products to search.\n\n    Returns:\n        None\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium.webdriver.common.keys import Keys\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        search_input = driver.find_element(By.CLASS_NAME, \"SuggestionSearch-input\")\n        search_input.clear()  # Clear any existing text\n        search_input.send_keys(text)  # Type the search text\n        search_input.send_keys(Keys.RETURN)  # Click enter\n        time.sleep(2)\n        print(f\"[{(__name__)}]: successfully searched: {text}\")\n\n    except Exception as e:\n        print(f\"[{(__name__)}]: Error occurred during the search: {e}\")",
        "description": "Search products by locating the search bar, inputting the text, and clicking enter"
    },
    "scrap_products_4": {
        "code": "def scrap_products_4(search_text):\n    \"\"\"\n    Scrap the available products data after searching for a specific product.\n\n    Args:\n        search_text (str): The text to search for products.\n\n    Returns:\n        The first item of the scraped products list.\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.extract_product_data import extract_product_details\n        from selenium_utils.json_products_data import save_results_to_json\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n\n        # Search for products\n        search_input = driver.find_element(By.CLASS_NAME, \"SuggestionSearch-input\")\n        search_input.clear()  # Clear any existing text\n        search_input.send_keys(search_text)  # Type the search text\n\n        # Locate the search button by its class name and click it\n        from selenium_utils.click_btn import click_btn\n        click_btn(driver, btn_class_name=\"SuggestionSearch-button\")\n        time.sleep(2)\n        print(f\"[{(__name__)}]: successfully searched: {search_text}\")\n\n        # Find all product elements\n        product_items = driver.find_elements(By.CLASS_NAME, 'product-brief-wrapper')\n        results = []\n\n        for item in product_items:\n            product_details = extract_product_details(item)\n            if product_details:  # Only append if product details were successfully extracted\n                results.append(product_details)\n\n        print(f\"[{(__name__)}]: Scraped {len(results)} products\")\n        save_results_to_json(results)\n        print(f\"[{(__name__)}]: Saved the results to json ./product_data/product_data.json\")\n        if results:\n            return results[0]\n        else:\n            return None\n\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to scrap products: {e}\")\n        return None",
        "description": "Scrap the available products data after searching for a specific product"
    },
    "pick_one_product_4": {
        "code": "def pick_one_product_4(product_data):\n    \"\"\"\n    Pick any one of the 'fanta' product and return its product_code.\n\n    Args:\n        product_data (list): A list of dictionaries containing product information.\n\n    Returns:\n        str: The product_code of the picked product.\n    \"\"\"\n    try:\n        if product_data:\n            result = product_data[0]['product_code']\n        else:\n            result = None\n\n        print(f\"[{(__name__)}]: Pick the first product with product_code {result}\")\n        return result\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to pick the first products: {e}\")\n        return None",
        "description": "Pick any one of the 'fanta' product and return its product_code"
    },
    "add_item_to_cart_4": {
        "code": "def add_item_to_cart_4(product_code):\n    \"\"\"\n    Add the selected 'fanta' product to cart after pick_one_product.\n\n    Args:\n        product_code (str): The product code to be added to cart.\n\n    Returns:\n        str: A message indicating whether the product has been successfully added to cart.\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        product = driver.find_element(By.CSS_SELECTOR, f'div[data-id=\"{product_code}\"]')\n        add_to_cart_button = product.find_element(By.CLASS_NAME, 'sepaButton.add-to-cart-button')\n        add_to_cart_button.click()  # Click the button\n        print(f\"[{__name__}]Successfully clicked 'Add to Cart' for product code: {product_code}\")\n        return f\"Product {product_code} added to cart successfully.\"\n    except Exception as e:\n        print(f\"Error adding item to cart: {e}\")\n        return f\"Failed to add product {product_code} to cart.\"",
        "description": "Add the selected 'fanta' product to cart after pick_one_product"
    },
    "get_ingredients_list": {
        "code": "def get_ingredients_list(recipe_name):\n    \"\"\"\n    Get the ingredients list of a specific recipe.\n\n    Args:\n        recipe_name (str): The name of the recipe.\n\n    Returns:\n        list: A list of ingredients for the recipe.\n    \"\"\"\n    # Assuming a dictionary that maps recipe names to their ingredients\n    recipe_ingredients = {\n        'egg fried rice': ['eggs', 'rice', 'vegetables', 'soy sauce'],\n        # Add more recipes as needed\n    }\n\n    # Check if the recipe exists in the dictionary\n    if recipe_name in recipe_ingredients:\n        return recipe_ingredients[recipe_name]\n    else:\n        return []",
        "description": "Get the ingredients list of a specific recipe"
    },
    "pick_one_product_3_2": {
        "code": "def pick_one_product_3_2(product_data):\n    \"\"\"\n    Pick any one of the product and return its product_code.\n\n    Args:\n        product_data (list): A list of dictionaries containing product information.\n\n    Returns:\n        str: The product_code of the picked product.\n    \"\"\"\n    try:\n        if product_data:\n            result = product_data[0]['product_code']\n        else:\n            result = None\n\n        print(f\"[{(__name__)}]: Pick the first product with product_code {result}\")\n        return result\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to pick the first products: {e}\")\n        return None",
        "description": "Pick any one of the product and return its product_code"
    },
    "add_item_to_cart_4_2": {
        "code": "def add_item_to_cart_4_2(product_code):\n    \"\"\"\n    Add the selected product to cart after pick_one_product.\n\n    Args:\n        product_code (str): The product code to be added to cart.\n\n    Returns:\n        str: A message indicating whether the product has been successfully added to cart.\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        product = driver.find_element(By.CSS_SELECTOR, f'div[data-id=\"{product_code}\"]')\n        add_to_cart_button = product.find_element(By.CLASS_NAME, 'sepaButton.add-to-cart-button')\n        add_to_cart_button.click()  # Click the button\n        print(f\"[{__name__}]Successfully clicked 'Add to Cart' for product code: {product_code}\")\n        return f\"Product {product_code} added to cart successfully.\"\n    except Exception as e:\n        print(f\"Error adding item to cart: {e}\")\n        return f\"Failed to add product {product_code} to cart.\"",
        "description": "Add the selected product to cart after pick_one_product"
    },
    "goto_url": {
        "code": "def goto_url(url):\n    \"\"\"\n    Go to a specific url in browser.\n    \n    Args:\n        url(str): the target url to browse\n        \n    Returns:\n    None\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium_utils.click_btn import click_btn\n        driver = reconnect_driver()\n        driver.get(url)\n        #To deal with ads\n        click_btn(driver, btn_class_name = 'btnCloseLarge')\n        print(f\"[{(__name__)}]: successfully go to url: {url}\")\n    \n    except Exception as e:\n        print(f\"[{(__name__)}]: {e}\")\n\n",
        "description": "Go to a specific url in browser"
    },
    "search_products": {
        "code": "def search_products(text):\n    \"\"\"\n    Search products by locate the input text box, type the text, and click the search button.\n    \n    Args:\n        text(str): the products to search\n        \n    Returns:\n    None\n    \"\"\"\n\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.click_btn import click_btn\n        import time\n\n        # Reconnect to current broswer\n        driver = reconnect_driver()\n        search_input = driver.find_element(By.CLASS_NAME, \"SuggestionSearch-input\")\n        search_input.clear()  # Clear any existing text\n        search_input.send_keys(text)  # Type the search text\n        \n        # Locate the search button by its class name and click it\n        click_btn(driver, btn_class_name=\"SuggestionSearch-button\")\n        time.sleep(2)\n        print(f\"[{(__name__)}]: successfully searched: {text}\")\n        \n    except Exception as e:\n        print(f\"[{(__name__)}]: Error occurred during the search: {e}\")\n        \n",
        "description": "Search products by locate the input text box, type the text, and click the search button"
    },
    "scrap_products": {
        "code": "def scrap_products():\n    \"\"\"\n    Scrape product data including id, name, price, and packing info.\n    \n    Args:\n    None\n    \n    Return:\n    The first item of the list\n    \"\"\"\n\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.extract_product_data import extract_product_details\n        from selenium_utils.json_products_data import save_results_to_json\n        import time\n        \n        # Reconnect to current broswer\n        driver = reconnect_driver()\n        # Find all product elements\n        product_items = driver.find_elements(By.CLASS_NAME, 'product-brief-wrapper')\n        results = []\n\n        for item in product_items:\n            product_details = extract_product_details(item)\n            if product_details:  # Only append if product details were successfully extracted\n                results.append(product_details)\n\n        print(f\"[{(__name__)}]: Scraped {len(results)} products\")\n        save_results_to_json(results)\n        print(f\"[{(__name__)}]: Saved the results to json ./product_data/product_data.json\")\n        if results:\n            return results[0]\n        else:\n            return None\n    except Exception as e:\n        print(f\"[{(__name__)}]:Unable to scrap products: {e}\")\n        return None\n\n",
        "description": "Scrape product data including id, name, price, and packing info"
    },
    "pick_one_product": {
        "code": "def pick_one_product():\n    \"\"\"\n    Pick the first product.\n    \n    Args:\n    \n    Return:\n    Product code\n    \"\"\"\n\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.json_products_data import load_results_from_json\n        import time\n        \n        # Reconnect to current broswer\n        driver = reconnect_driver()\n\n        product_data = load_results_from_json()\n        if product_data:\n            result = product_data[0]['product_code']\n        else:\n            result = None\n\n        print(f\"[{(__name__)}]: Pick the first product with product_code {result}\")\n        return result\n    except Exception as e:\n        print(f\"[{(__name__)}]:Unable to pick the first products: {e}\")\n        return None\n\n",
        "description": "Pick the first product"
    },
    "add_item_to_cart": {
        "code": "def add_item_to_cart(product_code):\n    \"\"\"\n    Add the item with the specified product code to the cart.\n    \n    Args:\n        product_code(str): the product id to be added to cart\n    \n    Return:\n    None\n        \n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n\n        # Reconnect to current broswer\n        driver = reconnect_driver()\n        product = driver.find_element(By.CSS_SELECTOR, f'div[data-id=\"{product_code}\"]')\n        add_to_cart_button = product.find_element(By.CLASS_NAME, 'sepaButton.add-to-cart-button')\n        add_to_cart_button.click()  # Click the button\n        print(f\"[{__name__}]Successfully clicked 'Add to Cart' for product code: {product_code}\")\n    except Exception as e:\n        print(f\"Error adding item to cart: {e}\")\n        \n",
        "description": "Add the item with the specified product code to the cart"
    },
    "search_products_5": {
        "code": "def search_products_5(text):\n    \"\"\"\n    Search products by locating the search bar, inputting the text, and clicking enter.\n\n    Args:\n        text (str): The products to search.\n\n    Returns:\n        None\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium.webdriver.common.keys import Keys\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        search_input = driver.find_element(By.CLASS_NAME, \"SuggestionSearch-input\")\n        search_input.clear()  # Clear any existing text\n        search_input.send_keys(text)  # Type the search text\n        search_input.send_keys(Keys.RETURN)  # Click enter\n        time.sleep(2)\n        print(f\"[{(__name__)}]: successfully searched: {text}\")\n\n    except Exception as e:\n        print(f\"[{(__name__)}]: Error occurred during the search: {e}\")",
        "description": "Search products by locating the search bar, inputting the text, and clicking enter"
    },
    "scrap_products_5": {
        "code": "def scrap_products_5(search_text):\n    \"\"\"\n    Scrap the available products data after searching for a specific product.\n\n    Args:\n        search_text (str): The text to search for products.\n\n    Returns:\n        The first item of the scraped products list.\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.extract_product_data import extract_product_details\n        from selenium_utils.json_products_data import save_results_to_json\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n\n        # Search for products\n        search_input = driver.find_element(By.CLASS_NAME, \"SuggestionSearch-input\")\n        search_input.clear()  # Clear any existing text\n        search_input.send_keys(search_text)  # Type the search text\n\n        # Locate the search button by its class name and click it\n        from selenium_utils.click_btn import click_btn\n        click_btn(driver, btn_class_name=\"SuggestionSearch-button\")\n        time.sleep(2)\n        print(f\"[{(__name__)}]: successfully searched: {search_text}\")\n\n        # Find all product elements\n        product_items = driver.find_elements(By.CLASS_NAME, 'product-brief-wrapper')\n        results = []\n\n        for item in product_items:\n            product_details = extract_product_details(item)\n            if product_details:  # Only append if product details were successfully extracted\n                results.append(product_details)\n\n        print(f\"[{(__name__)}]: Scraped {len(results)} products\")\n        save_results_to_json(results)\n        print(f\"[{(__name__)}]: Saved the results to json ./product_data/product_data.json\")\n        if results:\n            return results[0]\n        else:\n            return None\n\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to scrap products: {e}\")\n        return None",
        "description": "Scrap the available products data after searching for a specific product"
    },
    "pick_one_product_5": {
        "code": "def pick_one_product_5(product_data):\n    \"\"\"\n    Pick any one of the product and return its product_code.\n\n    Args:\n        product_data (list): A list of dictionaries containing product information.\n\n    Returns:\n        str: The product_code of the picked product.\n    \"\"\"\n    try:\n        if product_data:\n            result = product_data[0]['product_code']\n        else:\n            result = None\n\n        print(f\"[{(__name__)}]: Pick the first product with product_code {result}\")\n        return result\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to pick the first products: {e}\")\n        return None",
        "description": "Pick any one of the product and return its product_code"
    }
}