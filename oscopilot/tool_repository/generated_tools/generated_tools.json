{
    "goto_url": {
        "code": "def goto_url(url):\n    \"\"\"\n    Go to a specific url in browser.\n    \n    Args:\n        url(str): the target url to browse\n        \n    Returns:\n    None\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium_utils.click_btn import click_btn\n        driver = reconnect_driver()\n        driver.get(url)\n        #To deal with ads\n        click_btn(driver, btn_class_name = 'btnCloseLarge')\n        print(f\"[{(__name__)}]: successfully go to url: {url}\")\n    \n    except Exception as e:\n        print(f\"[{(__name__)}]: {e}\")\n\n",
        "description": "Go to a specific url in browser"
    },
    "search_products": {
        "code": "def search_products(text):\n    \"\"\"\n    Search products by locate the input text box, type the text, and click the search button.\n    \n    Args:\n        text(str): the products to search\n        \n    Returns:\n    None\n    \"\"\"\n\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.click_btn import click_btn\n        import time\n\n        # Reconnect to current broswer\n        driver = reconnect_driver()\n        search_input = driver.find_element(By.CLASS_NAME, \"SuggestionSearch-input\")\n        search_input.clear()  # Clear any existing text\n        search_input.send_keys(text)  # Type the search text\n        \n        # Locate the search button by its class name and click it\n        click_btn(driver, btn_class_name=\"SuggestionSearch-button\")\n        time.sleep(2)\n        print(f\"[{(__name__)}]: successfully searched: {text}\")\n        \n    except Exception as e:\n        print(f\"[{(__name__)}]: Error occurred during the search: {e}\")\n        \n",
        "description": "Search products by locate the input text box, type the text, and click the search button"
    },
    "search_products_1": {
        "code": "def search_products_1(text):\n    \"\"\"\n    Search products by locating the input text box, typing the text, and clicking the search button.\n\n    Args:\n        text (str): The products to search.\n\n    Returns:\n        None\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.click_btn import click_btn\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        search_input = driver.find_element(By.CLASS_NAME, \"SuggestionSearch-input\")\n        search_input.clear()  # Clear any existing text\n        search_input.send_keys(text)  # Type the search text\n\n        # Locate the search button by its class name and click it\n        click_btn(driver, btn_class_name=\"SuggestionSearch-button\")\n        time.sleep(2)\n        print(f\"[{(__name__)}]: successfully searched: {text}\")\n\n    except Exception as e:\n        print(f\"[{(__name__)}]: Error occurred during the search: {e}\")",
        "description": "Search products by locating the input text box, typing the text, and clicking the search button"
    },
    "search_products_2": {
        "code": "def search_products_2(text):\n    \"\"\"\n    Search products by locating the input text box, typing the text, and clicking the search button.\n\n    Args:\n        text (str): The products to search.\n\n    Returns:\n        None\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.click_btn import click_btn\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        search_input = driver.find_element(By.CLASS_NAME, \"SuggestionSearch-input\")\n        search_input.clear()  # Clear any existing text\n        search_input.send_keys(text)  # Type the search text\n\n        # Locate the search button by its class name and click it\n        click_btn(driver, btn_class_name=\"SuggestionSearch-button\")\n        time.sleep(2)\n        print(f\"[{(__name__)}]: successfully searched: {text}\")\n\n    except Exception as e:\n        print(f\"[{(__name__)}]: Error occurred during the search: {e}\")",
        "description": "Search products by locating the input text box, typing the text, and clicking the search button"
    },
    "search_products_3": {
        "code": "def search_products_3(text):\n    \"\"\"\n    Search products by locating the search bar, inputting the text, and clicking enter.\n\n    Args:\n        text (str): The products to search.\n\n    Returns:\n        None\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium.webdriver.common.keys import Keys\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        search_input = driver.find_element(By.CLASS_NAME, \"SuggestionSearch-input\")\n        search_input.clear()  # Clear any existing text\n        search_input.send_keys(text)  # Type the search text\n        search_input.send_keys(Keys.RETURN)  # Click enter\n        time.sleep(2)\n        print(f\"[{(__name__)}]: successfully searched: {text}\")\n\n    except Exception as e:\n        print(f\"[{(__name__)}]: Error occurred during the search: {e}\")",
        "description": "Search products by locating the search bar, inputting the text, and clicking enter"
    },
    "get_ingredients_list": {
        "code": "def get_ingredients_list(recipe_name):\n    \"\"\"\n    Get the ingredients list of a specific recipe.\n\n    Args:\n        recipe_name (str): The name of the recipe.\n\n    Returns:\n        list: A list of ingredients for the recipe.\n    \"\"\"\n    # Assuming a dictionary that maps recipe names to their ingredients\n    recipe_ingredients = {\n        'egg fried rice': ['eggs', 'rice', 'vegetables', 'soy sauce'],\n        # Add more recipes as needed\n    }\n\n    # Check if the recipe exists in the dictionary\n    if recipe_name in recipe_ingredients:\n        return recipe_ingredients[recipe_name]\n    else:\n        return []",
        "description": "Get the ingredients list of a specific recipe"
    },
    "goto_cart_url": {
        "code": "def goto_cart_url(url):\n    \"\"\"\n    Go to the cart page.\n    \n    Args:\n        url(str): the target url of cart page\n        \n    Returns:\n    None\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        driver = reconnect_driver()\n        driver.get(url)\n        print(f\"[{(__name__)}]: successfully go to url: {url}\")\n    \n    except Exception as e:\n        print(f\"[{(__name__)}]: {e}\")\n\n",
        "description": "Go to the cart page"
    },
    "exit_current_directory": {
        "code": "import os\n\ndef exit_current_directory(current_dir):\n    \"\"\"\n    Exit the current working directory.\n\n    Args:\n        current_dir (str): The path of the current working directory.\n\n    Returns:\n        str: The parent directory of the current working directory.\n    \"\"\"\n    try:\n        # Get the parent directory of the current working directory\n        parent_dir = os.path.dirname(current_dir)\n        \n        # Change the current working directory to its parent directory\n        os.chdir(parent_dir)\n        \n        return parent_dir\n    except Exception as e:\n        print(f\"Unable to exit the current directory: {e}\")\n        return None",
        "description": "Exit the current working directory"
    },
    "add_item_to_cart": {
        "code": "def add_item_to_cart(product_code):\n    \"\"\"\n    Add the item with the specified product code to the cart.\n    \n    Args:\n        product_code(str): the product id to be added to cart\n    \n    Return:\n    None\n        \n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium.webdriver.support.ui import WebDriverWait\n        from selenium.webdriver.support import expected_conditions as EC\n\n        # Reconnect to current broswer\n        driver = reconnect_driver()\n        product = driver.find_element(By.CSS_SELECTOR, f'div[data-id=\"{product_code}\"]')\n        add_to_cart_button = product.find_element(By.CLASS_NAME, \"add-to-cart-button\")\n\n        # Wait for the button to be clickable\n        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(add_to_cart_button))\n\n        # Move to the button and click it\n        driver.execute_script(\"arguments[0].click();\", add_to_cart_button)\n        \n        print(f\"[{__name__}]Successfully clicked Add to Cart for product code: {product_code}\")\n    except Exception as e:\n        print(f\"Error adding item to cart: {e}\")\n        \n",
        "description": "Add the item with the specified product code to the cart"
    },
    "add_item_to_cart_1": {
        "code": "def add_item_to_cart_1(pick_one_product_return_val):\n    \"\"\"\n    Add the selected product to cart after pick_one_product.\n\n    Args:\n        pick_one_product_return_val (dict): The return value of pick_one_product, containing the product code.\n\n    Returns:\n        str: A message indicating whether the product was successfully added to the cart.\n    \"\"\"\n    product_code = pick_one_product_return_val['product_code']\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium.webdriver.support.ui import WebDriverWait\n        from selenium.webdriver.support import expected_conditions as EC\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        product = driver.find_element(By.CSS_SELECTOR, f'div[data-id=\"{product_code}\"]')\n        add_to_cart_button = product.find_element(By.CLASS_NAME, \"add-to-cart-button\")\n\n        # Wait for the button to be clickable\n        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(add_to_cart_button))\n\n        # Move to the button and click it\n        driver.execute_script(\"arguments[0].click();\", add_to_cart_button)\n\n        print(f\"[{__name__}]Successfully clicked Add to Cart for product code: {product_code}\")\n        return f\"Product {product_code} added to cart successfully.\"\n    except Exception as e:\n        print(f\"Error adding item to cart: {e}\")\n        return f\"Failed to add product {product_code} to cart.\"",
        "description": "Add the selected product to cart after pick_one_product"
    },
    "add_item_to_cart_2": {
        "code": "def add_item_to_cart_2(pick_one_product_return_val):\n    \"\"\"\n    Add the selected product to cart after pick_one_product.\n\n    Args:\n        pick_one_product_return_val (dict): The return value of pick_one_product, containing the product code.\n\n    Returns:\n        str: A message indicating whether the product was successfully added to the cart.\n    \"\"\"\n    product_code = pick_one_product_return_val['product_code']\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium.webdriver.support.ui import WebDriverWait\n        from selenium.webdriver.support import expected_conditions as EC\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        product = driver.find_element(By.CSS_SELECTOR, f'div[data-id=\"{product_code}\"]')\n        add_to_cart_button = product.find_element(By.CLASS_NAME, \"add-to-cart-button\")\n\n        # Wait for the button to be clickable\n        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(add_to_cart_button))\n\n        # Move to the button and click it\n        driver.execute_script(\"arguments[0].click();\", add_to_cart_button)\n\n        print(f\"[{__name__}]Successfully clicked Add to Cart for product code: {product_code}\")\n        return f\"Product {product_code} added to cart successfully.\"\n    except Exception as e:\n        print(f\"Error adding item to cart: {e}\")\n        return f\"Failed to add product {product_code} to cart.\"",
        "description": "Add the selected product to cart after pick_one_product"
    },
    "add_item_to_cart_3": {
        "code": "def add_item_to_cart_3(pick_one_product_return_val):\n    \"\"\"\n    Add the selected product to cart after pick_one_product.\n\n    Args:\n        pick_one_product_return_val (dict): The return value of pick_one_product, containing the product code.\n\n    Returns:\n        str: A message indicating whether the product was successfully added to the cart.\n    \"\"\"\n    product_code = pick_one_product_return_val['product_code']\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium.webdriver.support.ui import WebDriverWait\n        from selenium.webdriver.support import expected_conditions as EC\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        product = driver.find_element(By.CSS_SELECTOR, f'div[data-id=\"{product_code}\"]')\n        add_to_cart_button = product.find_element(By.CLASS_NAME, \"add-to-cart-button\")\n\n        # Wait for the button to be clickable\n        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(add_to_cart_button))\n\n        # Move to the button and click it\n        driver.execute_script(\"arguments[0].click();\", add_to_cart_button)\n\n        print(f\"[{__name__}]Successfully clicked Add to Cart for product code: {product_code}\")\n        return f\"Product {product_code} added to cart successfully.\"\n    except Exception as e:\n        print(f\"Error adding item to cart: {e}\")\n        return f\"Failed to add product {product_code} to cart.\"",
        "description": "Add the selected product to cart after pick_one_product"
    },
    "scrap_products": {
        "code": "def scrap_products(text):\n    \"\"\"\n    Scrape product data including id, name, price, and packing info.\n    \n    Args:\n        text(str): the products to search\n    \n    Return:\n    The first item of the list\n    \"\"\"\n\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.extract_product_data import extract_product_details\n        from selenium_utils.json_products_data import save_results_to_json\n        import time\n        \n        # Reconnect to current broswer\n        driver = reconnect_driver()\n        # Find all product elements\n        product_items = driver.find_elements(By.CLASS_NAME, 'product-brief-wrapper')\n        results = []\n\n        for item in product_items:\n            product_details = extract_product_details(item)\n            if product_details:  # Only append if product details were successfully extracted\n                results.append(product_details)\n\n        print(f\"[{(__name__)}]: Scraped {len(results)} products\")\n        save_results_to_json(text, results)\n        print(f\"[{(__name__)}]: Saved the results to json ./product_data/product_data.json\")\n        if results:\n            return results\n        else:\n            return None\n    except Exception as e:\n        print(f\"[{(__name__)}]:Unable to scrap products: {e}\")\n        return None\n\n",
        "description": "Scrape product data including id, name, price, and packing info"
    },
    "scrap_products_1": {
        "code": "def scrap_products_1(text):\n    \"\"\"\n    Scrap the available products data.\n\n    Args:\n        text (str): The products to search.\n\n    Returns:\n        list: The scraped product data.\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.extract_product_data import extract_product_details\n        from selenium_utils.json_products_data import save_results_to_json\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        # Find all product elements\n        product_items = driver.find_elements(By.CLASS_NAME, 'product-brief-wrapper')\n        results = []\n\n        for item in product_items:\n            product_details = extract_product_details(item)\n            if product_details:  # Only append if product details were successfully extracted\n                results.append(product_details)\n\n        print(f\"[{(__name__)}]: Scraped {len(results)} products\")\n        save_results_to_json(text, results)\n        print(f\"[{(__name__)}]: Saved the results to json ./product_data/product_data.json\")\n        if results:\n            return results\n        else:\n            return None\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to scrap products: {e}\")\n        return None",
        "description": "Scrap the available products data"
    },
    "scrap_products_2": {
        "code": "def scrap_products_2(text):\n    \"\"\"\n    Scrap the available products data.\n\n    Args:\n        text (str): The products to search.\n\n    Returns:\n        list: The scraped product data.\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.extract_product_data import extract_product_details\n        from selenium_utils.json_products_data import save_results_to_json\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        # Find all product elements\n        product_items = driver.find_elements(By.CLASS_NAME, 'product-brief-wrapper')\n        results = []\n\n        for item in product_items:\n            product_details = extract_product_details(item)\n            if product_details:  # Only append if product details were successfully extracted\n                results.append(product_details)\n\n        print(f\"[{(__name__)}]: Scraped {len(results)} products\")\n        save_results_to_json(text, results)\n        print(f\"[{(__name__)}]: Saved the results to json ./product_data/product_data.json\")\n        if results:\n            return results\n        else:\n            return None\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to scrap products: {e}\")\n        return None",
        "description": "Scrap the available products data"
    },
    "scrap_products_3": {
        "code": "def scrap_products_3(text):\n    \"\"\"\n    Scrap the available products data.\n\n    Args:\n        text (str): The products to search.\n\n    Returns:\n        list: The scraped product data.\n    \"\"\"\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n        from selenium.webdriver.common.by import By\n        from selenium_utils.extract_product_data import extract_product_details\n        from selenium_utils.json_products_data import save_results_to_json\n        import time\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        # Find all product elements\n        product_items = driver.find_elements(By.CLASS_NAME, 'product-brief-wrapper')\n        results = []\n\n        for item in product_items:\n            product_details = extract_product_details(item)\n            if product_details:  # Only append if product details were successfully extracted\n                results.append(product_details)\n\n        print(f\"[{(__name__)}]: Scraped {len(results)} products\")\n        save_results_to_json(text, results)\n        print(f\"[{(__name__)}]: Saved the results to json ./product_data/product_data.json\")\n        if results:\n            return results\n        else:\n            return None\n    except Exception as e:\n        print(f\"[{(__name__)}]: Unable to scrap products: {e}\")\n        return None",
        "description": "Scrap the available products data"
    },
    "add_all_items_to_cart": {
        "code": "def add_all_items_to_cart(pick_all_products_return_val):\n    \"\"\"\n    Add all the selected products to cart.\n\n    Args:\n        pick_all_products_return_val (dict): The return value of pick_all_products, containing the product codes.\n\n    Returns:\n        str: A message indicating whether the products were successfully added to the cart.\n    \"\"\"\n    product_codes = pick_all_products_return_val['product_codes']\n    try:\n        from selenium_utils.reconnect_driver import reconnect_driver\n\n        # Reconnect to current browser\n        driver = reconnect_driver()\n        messages = []\n        for product_code in product_codes:\n            url = f\"https://www.hktvmall.com/hktv/zh/cart/add?productCodePost={product_code}&qty=1\"\n            driver.get(url)\n            print(f\"[{__name__}]Successfully clicked Add to Cart for product code: {product_code}\")\n            messages.append(f\"Product {product_code} added to cart successfully.\")\n        return '\\n'.join(messages)\n    except Exception as e:\n        print(f\"Error adding item to cart: {e}\")\n        return f\"Failed to add products to cart.\"       \n",
        "description": "Add all the selected products to cart"
    }
}